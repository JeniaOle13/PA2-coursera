getinverse <- function() m.in
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
cacheSolve <- function(x, ...) {
m.in <- x$getinverse()
if(!is.null(m.in)) {
message("getting cached data")
return(m.in)
}
data <- x$get()
m.in <- pseudoinverse(data, ...)
X$setinverse(m.in)
m.in
}
X <- matrix(rpois(25,3), nrow = 5)
cX <- makeCacheMatrix(X)
makeCacheMatrix <- function(x = matrix()) {
m.in <- NULL
set <- function(y) {
x <<- y
m.in <<- NULL
}
get <- function() x
setinverse <- function(Inverse) m.in <<- Inverse
getinverse <- function() m.in
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
m.in <- x$getinverse()
if(!is.null(m.in)) {
message("getting cached data")
return(m.in)
}
data <- x$get()
m.in <- pseudoinverse(data, ...)
X$setinverse(m.in)
m.in
}
X <- matrix(rpois(25,3), nrow = 5)
cX <- makeCacheMatrix(X)
cX$get()
cacheSolve(cX)
makeCacheMatrix <- function(x = matrix()) {
m.in <- NULL
set <- function(y) {
x <<- y
m.in <<- NULL
}
get <- function() x
setinverse <- function(Inverse) m.in <<- Inverse
getinverse <- function() m.in
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
m.in <- x$getinverse()
if(!is.null(m.in)) {
message("getting cached data")
return(m.in)
}
data <- x$get()
m.in <- pseudoinverse(data, ...)
X$setinverse(m.in)
m.in
}
X <- matrix(rpois(25,3), nrow = 5)
cX <- makeCacheMatrix(X)
cX$get()
cacheSolve(cX)
cX$setinverse()
cX$set()
cX$getinverse()
makeCacheMatrix <- function(X = matrix()) {
inverse <- NULL
set <- function(Y){
X <<- Y
inverse <<- NULL
}
get <- function() X
setinverse <- function(Inverse) inverse <<- Inverse
getinverse <- function() inverse
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(X, ...)
inverse <- X$getinverse()
if(!is.null(inverse)){
message("matrix is in memory")
return(inverse)
}
message("inverse is not in memory so the inverse (if exist) is gonna be computed")
data <- X$get()
inverse <- pseudoinverse(data, ...)
X$setinverse(inverse)
inverse
}
cacheSolve <- function(X, ...)
{
inverse <- X$getinverse()
if(!is.null(inverse)){
message("matrix is in memory")
return(inverse)
}
message("inverse is not in memory so the inverse (if exist) is gonna be computed")
data <- X$get()
inverse <- pseudoinverse(data, ...)
X$setinverse(inverse)
inverse
}
X <- matrix(rpois(25,3), nrow = 5)
cX <- makeCacheMatrix(X)
cX$get()
cacheSolve(cX)
cacheSolve(cX)
invX <- cacheSolve(cX)
#Experiment to try if it works
#rectangular matrix rows > cols
Y <- matrix(rpois(20,2), nrow = 5, ncol = 4)
cY <- makeCacheMatrix(Y)
cY$get()
cacheSolve(cY)
cacheSolve(cY)
invY <- cacheSolve(cY)
## Put comments here that give an overall description of what your
## functions do
## makeCacheMatrix stores a matrix X in memory
## cacheSolve shows the inverse of a matrix if is in memory or computes the inverse and then shows the inverse
## Write a short comment describing this function
## makeCacheMatrix uses scoping rules and stores matrices in memory
makeCacheMatrix <- function(x = matrix()) {
m.in <- NULL
set <- function(y){
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(Inverse) m.in <<- Inverse
getinverse <- function() m.in
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
## Write a short comment describing this function
## cacheSolve uses corpcor, a library that avoids determinants and uses orthogonal descomposition
## note: this function will try to load corpcor library and if it's not installed will try to install the library
cacheSolve <- function(X, ...)
{
m.in <- x$getinverse()
if(!is.null(inverse)){
message("matrix is in memory")
return(m.in)
}
message("inverse is not in memory so the inverse (if exist) is gonna be computed")
data <- x$get()
m.in <- pseudoinverse(data, ...)
x$setinverse(m.in)
m.in
}
X <- matrix(rpois(25,3), nrow = 5)
cX <- makeCacheMatrix(X)
cX$get()
cacheSolve(cX)
cacheSolve(cX)
invX <- cacheSolve(cX)
## Put comments here that give an overall description of what your
## functions do
## makeCacheMatrix stores a matrix X in memory
## cacheSolve shows the inverse of a matrix if is in memory or computes the inverse and then shows the inverse
## Write a short comment describing this function
## makeCacheMatrix uses scoping rules and stores matrices in memory
makeCacheMatrix <- function(x = matrix()) {
m.in <- NULL
set <- function(y){
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(Inverse) m.in <<- Inverse
getinverse <- function() m.in
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
## Write a short comment describing this function
## cacheSolve uses corpcor, a library that avoids determinants and uses orthogonal descomposition
## note: this function will try to load corpcor library and if it's not installed will try to install the library
cacheSolve <- function(x, ...)
{
m.in <- x$getinverse()
if(!is.null(inverse)){
message("matrix is in memory")
return(m.in)
}
message("inverse is not in memory so the inverse (if exist) is gonna be computed")
data <- x$get()
m.in <- pseudoinverse(data, ...)
x$setinverse(m.in)
m.in
}
X <- matrix(rpois(25,3), nrow = 5)
cX <- makeCacheMatrix(X)
cX$get()
cacheSolve(cX)
## Put comments here that give an overall description of what your
## functions do
## makeCacheMatrix stores a matrix X in memory
## cacheSolve shows the inverse of a matrix if is in memory or computes the inverse and then shows the inverse
## Write a short comment describing this function
## makeCacheMatrix uses scoping rules and stores matrices in memory
makeCacheMatrix <- function(x = matrix()) {
m.in <- NULL
set <- function(y){
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(Inverse) m.in <<- Inverse
getinverse <- function() m.in
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
## Write a short comment describing this function
## cacheSolve uses corpcor, a library that avoids determinants and uses orthogonal descomposition
## note: this function will try to load corpcor library and if it's not installed will try to install the library
cacheSolve <- function(x, ...)
{
m.in <- x$getinverse()
if(!is.null(m.in)){
message("matrix is in memory")
return(m.in)
}
message("inverse is not in memory so the inverse (if exist) is gonna be computed")
data <- x$get()
m.in <- pseudoinverse(data, ...)
x$setinverse(m.in)
m.in
}
X <- matrix(rpois(25,3), nrow = 5)
cX <- makeCacheMatrix(X)
cX$get()
cacheSolve(cX)
cacheSolve(cX)
invX <- cacheSolve(cX)
## Write a short comment describing this function
## cacheSolve uses corpcor, a library that avoids determinants and uses orthogonal descomposition
## note: this function will try to load corpcor library and if it's not installed will try to install the library
cacheSolve <- function(x, ...)
{
m.in <- x$getinverse()
if(!is.null(m.in)){
message("matrix is in memory")
return(m.in)
}
message("inverse is not in memory so the inverse (if exist) is gonna be computed")
data <- x$get()
m.in <- pseudoinverse(data, ...)
x$setinverse(m.in)
m.in
}
X <- matrix(rpois(25,3), nrow = 5)
cX <- makeCacheMatrix(X)
cX$get()
## Put comments here that give an overall description of what your
## functions do
## makeCacheMatrix stores a matrix X in memory
## cacheSolve shows the inverse of a matrix if is in memory or computes the inverse and then shows the inverse
## Write a short comment describing this function
## makeCacheMatrix uses scoping rules and stores matrices in memory
makeCacheMatrix <- function(x = matrix()) {
m.in <- NULL
set <- function(y){
x <<- y
m.in <<- NULL
}
get <- function() x
setinverse <- function(Inverse) m.in <<- Inverse
getinverse <- function() m.in
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
## Write a short comment describing this function
## cacheSolve uses corpcor, a library that avoids determinants and uses orthogonal descomposition
## note: this function will try to load corpcor library and if it's not installed will try to install the library
cacheSolve <- function(x, ...)
{
m.in <- x$getinverse()
if(!is.null(m.in)){
message("matrix is in memory")
return(m.in)
}
message("inverse is not in memory so the inverse (if exist) is gonna be computed")
data <- x$get()
m.in <- pseudoinverse(data, ...)
x$setinverse(m.in)
m.in
}
X <- matrix(rpois(25,3), nrow = 5)
cX <- makeCacheMatrix(X)
cX$get()
cacheSolve(cX)
cacheSolve(cX)
invX <- cacheSolve(cX)
makeCacheMatrix <- function(x = matrix()) {
m.in <- NULL
set <- function(y) {
x <<- y
m.in <<- NULL
}
get <- function() x
setinverse <- function(Inverse) m.in <<- Inverse
getinverse <- function() m.in
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
m.in <- x$getinverse()
if(!is.null(m.in)) {
message("getting cached data")
return(m.in)
}
data <- x$get()
m.in <- pseudoinverse(data, ...)
X$setinverse(m.in)
m.in
}
makeCacheMatrix <- function(x = matrix()) {
m.in <- NULL
set <- function(y) {
x <<- y
m.in <<- NULL
}
get <- function() x
setinverse <- function(Inverse) m.in <<- Inverse
getinverse <- function() m.in
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
m.in <- x$getinverse()
if(!is.null(m.in)) {
message("getting cached data")
return(m.in)
}
data <- x$get()
m.in <- pseudoinverse(data, ...)
X$setinverse(m.in)
m.in
}
X <- matrix(rpois(25,3), nrow = 5)
cX <- makeCacheMatrix(X)
cX$get()
cacheSolve(cX)
makeCacheMatrix <- function(x = matrix()) {
m.in <- NULL
set <- function(y) {
x <<- y
m.in <<- NULL
}
get <- function() x
setinverse <- function(Inverse) m.in <<- Inverse
getinverse <- function() m.in
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
m.in <- x$getinverse()
if(!is.null(m.in)) {
message("getting cached data")
return(m.in)
}
data <- x$get()
m.in <- pseudoinverse(data, ...)
x$setinverse(m.in)
m.in
}
Y <- matrix(rpois(20,2), nrow = 5, ncol = 4)
cY <- makeCacheMatrix(Y)
cY$get()
cacheSolve(cY)
cacheSolve(cY)
invY <- cacheSolve(cY)
y <- matrix(1:10, nrow = 5, ncol = 4)
y
cy <- makeCacheMatrix(Y)
cy$get()
cacheSolve(cy)
cacheSolve(cy)
invy <- cacheSolve(cy)
y <- matrix(1:10, nrow = 10, ncol = 20)
cy <- makeCacheMatrix(Y)
cy$get()
cacheSolve(cy)
cacheSolve(cy)
invy <- cacheSolve(cy)
Z <- matrix(rpois(20,1), nrow = 20, ncol = 10)
cZ <- makeCacheMatrix(Z)
cZ$get()
cacheSolve(cZ)
cacheSolve(cZ)
invZ <- cacheSolve(cZ)
x <- matrix(1:100, nrow = 5)
x
cx <- makeCacheMatrix(X)
cx$get()
cacheSolve(cx)
cacheSolve(cx)
invx <- cacheSolve(cx)
# 2
a <- matrix(1:100, nrow = 5)
makeCacheMatrix <- function(x = matrix()) {
m.in <- NULL
set <- function(y) {
x <<- y
m.in <<- NULL
}
get <- function() x
setinverse <- function(Inverse) m.in <<- Inverse
getinverse <- function() m.in
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m.in <- x$getinverse()
if(!is.null(m.in)) {
message("getting cached data")
return(m.in)
}
data <- x$get()
m.in <- pseudoinverse(data, ...)
x$setinverse(m.in)
m.in
}
a <- matrix(1:100, nrow = 5)
i.a <- makeCacheMatrix(a)
i.a$get()
cacheSolve(i.a)
cacheSolve(i.a)
in.x <- cacheSolve(i.a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m.in <- NULL
set <- function(y) {
x <<- y
m.in <<- NULL
}
get <- function() x
setinverse <- function(Inverse) m.in <<- Inverse
getinverse <- function() m.in
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m.in <- x$getinverse()
if(!is.null(m.in)) {
message("getting cached data")
return(m.in)
}
data <- x$get()
m.in <- pseudoinverse(data, ...)
x$setinverse(m.in)
m.in
}
a <- matrix(1:10, nrow = 10, ncol = 20)
i.a <- makeCacheMatrix(Y)
i.a$get()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m.in <- NULL
set <- function(y) {
x <<- y
m.in <<- NULL
}
get <- function() x
setinverse <- function(Inverse) m.in <<- Inverse
getinverse <- function() m.in
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m.in <- x$getinverse()
if(!is.null(m.in)) {
message("getting cached data")
return(m.in)
}
data <- x$get()
m.in <- pseudoinverse(data, ...)
x$setinverse(m.in)
m.in
}
a <- matrix(1:10, nrow = 10, ncol = 20)
i.a <- makeCacheMatrix(a)
i.a$get()
cacheSolve(i.a)
cacheSolve(i.a)
in.a <- cacheSolve(i.a)
in.a %*% a
a <- matrix(1:10, nrow = 10, ncol = 20)
i.a <- makeCacheMatrix(a)
i.a$get()
cacheSolve(i.a)
cacheSolve(i.a)
in.a <- cacheSolve(i.a)
in.a %*% a
